<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Jorge Sepulveda</title>
    <link href="https://www.jsepulveda.co/feed.xml" rel="self" />
    <link href="https://www.jsepulveda.co" />
    <updated>1969-12-31T19:00:00-05:00</updated>
    <author>
        <name>Jorge</name>
    </author>
    <id>https://www.jsepulveda.co</id>

    <entry>
        <title>Las ventajas de los sitios web estáticos</title>
        <author>
            <name>Jorge</name>
        </author>
        <link href="https://www.jsepulveda.co/las-ventajas-de-los-sitios-web-estaticos.html"/>
        <id>https://www.jsepulveda.co/las-ventajas-de-los-sitios-web-estaticos.html</id>

        <updated>2020-07-21T17:59:09-05:00</updated>
            <summary>
                <![CDATA[
                    Los sitios web están formados de documentos de texto que son enviados a través de internet a tu navegador web (sea Firefox, Safary, Chrome y -ojalá no- Interner Explorer), que los interpreta y los muestra en la pantalla del computador, celular o tablet. Cada vez&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Los sitios web están formados de documentos de texto que son enviados a través de internet a tu navegador web (sea Firefox, Safary, Chrome y -ojalá no- Interner Explorer), que los interpreta y los muestra en la pantalla del computador, celular o tablet. Cada vez que visitas un sitio web, recibes una copia de los archivos que componen las páginas web de este.</p>
<p>Hay básicamente dos opciones para crear sitios web hoy en día: los sitios dinámicos y los sitios estáticos. Los primeros funcionan por medio de una base de datos que contiene todos los textos de las páginas del sitio, un servidor y programa escrito en algún código de lenguaje de servidor (sea PHP, Ruby, Python, Javascript, etc.) que se ejecuta en este. Cada vez que alguien intenta acceder al dominio (la dirección del sitio web), el servidor que aloja el sitio web tiene que construir el documento de la página web y enviarlo al navegador. Estos sitios son muy populares hoy en día porque hay una serie de herramientas que permiten que personas sin conocimiento de desarrollo web puedan crear un sitio fácil y rápido. Estas herramientas se conocen como CMSs (Content Management Systems), siendo la más conocida de ellas, Wordpress.</p>
<p>A pesar de sus ventajas en cuanto a facilidad para crear contenido y de que puedes configurarlo fácilmente sin tener muchos conocimientos técnicos, presentan algunos inconvenientes:</p>
<ul>
<li>Tienes que adquirir algún servicio de «hosting», que es básicamente pagarle a una compañía que ofrezca ese servicio que te hospede tu sitio web.</li>
<li>Debes instalar y configurar el servidor para que haga funcionar tu sitio web.</li>
<li>También tienes que estar pendiente de las actualizaciones de software para que nadie hackee tu sitio web.</li>
</ul>
<p>Ahora hablemos de los sitios estáticos. Estos están compuestos de los mismos archivos que recibes en el navegador cuando visitas un sitio web estático; el sitio web no se crea en el servidor a partir de unas plantillas, una base de datos y un procesamiento de todo esto para construirlos, como ocurre en los sitios estáticos, sino que ya están ahí creados. Guardados. Solo es cuestión de enviarlos y ya. En consecuencia requeren mucho menos infraestructura y recursos para funcionar. De hecho, anteriormente (en los inicios de la web) todos los sitios web eran estáticos. Fue con la llegada de los CMS como Wordpress o Joomla que se popularizaron los sitios web que llamamos dinámicos, porque ofrecían muchas ventajas y facilidades tanto a los desarrolladores como a las personas que requerían de una página web, a la hora de desarrollarlos y administrarlos.</p>
<p>Sin embargo, hoy en día se están empezando a popularizar otra vez los sitios estáticos. Ya hay herramientas que permiten crear esta clase de sitios sin necesidad de conocer los lenguajes en los que están escritos (HTML, CSS y Javascript). Estas herramientas se encargan de crear el sitio web por nosotros. Puedes usar uno para crear tu sitio web, instalar un tema y hospedarlo en alguno de los servicios para alojar sitios estáticos de los cuales hablaremos más adelante en este artículo, de forma completamente gratuita. Al no haber necesidad de lenguaje de servidor ni base de datos, hay menos trabajo de instalar actualizaciones de seguridad, además de ser tan livianos que no requieren casi recursos de cómputo. De ahí que hayan opciones gratis para alojarlos. Nos ahorramos el Hosting.</p>
<p>Desde luego que no todos los sitios web se pueden desarrollar de forma estática. Hay ciertos sitios que tienen una serie de funciones más complejas y requerirían ser construidos como sitios dinámicos. Sin embargo, muchos de los requerimientos en cuanto a sitios web podrían perfectamente satisfacerse con un simple sitio estático. Este blog es uno de ellos, por ejemplo. Fue construido con un generador de sitios estáticos llamado Jekyll (posiblemente haga un tutorial sobre cómo usarlo en el futuro) y está alojado en Github Pages, que es una plataforma donde se pueden alojar sitios estáticos.</p>
<p>Cualquiera puede crear un sitio web estático en un repositorio de Github y servirlo en su servicio de páginas. Te dan un dominio que es algo así como tu-nombre-de-usuario.github.io, pero lo puedes cambiar por uno personalizado. Hay otras opciones también: Gitlab Pages ofrece casi los mismos servicios para alojar sitios estáticos que Github (10 «builds» por hora y 100 GB de ancho de banda por mes). Netlify permite guardar un sitio estático, y debido a que cuentan con varios datacenters por todo el mundo, pueden servirlo desde el que esté más cerca al lugar donde el usuario esté ¡y también dan un certificado SSL gratis! Una última opción que quisiera listar sería Amazon Web Services por medio de su servicio de almacenamiento S3. Si bien no es gratis, es muy barata (he sabido de sitios con muchísimas visitas al mes que pagan alrededor de dos dólares mensuales).</p>
<p>Ya para concluir: no todos los sitios web son aptos para ser estáticos. Facebook o Amazon no funcionarían como sitios web estáticos (o sitios que requieran autenticación, mucho contenido dinámico, gestión de usuarios, o ser actualizados muy frecuentemente). Depende del tipo de sitio web, este podría ser ya sea estático o dinámico. Si se trata de un blog, una página para un restaurante o para una empresa que sea sencilla y que no requiera estar actualizando su contenido muy frecuentemente, podrían perfectamente desarrollarse como sitios web estáticos.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Los mejores canales de youtube para programadores</title>
        <author>
            <name>Jorge</name>
        </author>
        <link href="https://www.jsepulveda.co/los-mejores-canales-de-youtube-para-programadores-en-el-2018.html"/>
        <id>https://www.jsepulveda.co/los-mejores-canales-de-youtube-para-programadores-en-el-2018.html</id>

        <updated>2020-07-21T17:59:09-05:00</updated>
            <summary>
                <![CDATA[
                    En todo el tiempo que me he dedicado a explorar youtube buscando tutoriales y cosas para aprender, he dado con un grupo particular de canales sobre desarrollo de software en general. Algunos de estos tienen muy buenos tutoriales para aprender lenguajes, librerías y frameworks. Otros tienen&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>En todo el tiempo que me he dedicado a explorar youtube buscando tutoriales y cosas para aprender, he dado con un grupo particular de canales sobre desarrollo de software en general. Algunos de estos tienen muy buenos tutoriales para aprender lenguajes, librerías y <em>frameworks</em>. Otros tienen videos más enfocados a la parte empresarial y al desarrollo profesional. Todos ellos están completamente en inglés. La mayor parte de los buenos canales y tururiales así como sitios web están en ese idioma. Tengo un artículo en el que hablo sobre cómo aprender inglés efectivamente que puedes leer haciendo click <a href="https://www.jorgesepulveda.com.co/como-aprender-ingles" target="_blank" rel="noopener noreferrer">aquí</a>. Bueno, sin más preámbulos voy a presentar los canales que más me gustan sobre el tema.</p>
<h3><a href="https://www.youtube.com/user/TechGuyWeb" target="_blank" rel="nofollow noopener noreferrer">Traversy Media</a></h3>
<p>En este canal puedes encontrar videos a cerca de cómo usar Vue.js, React.js, Node.js, Express, Laravel, así como principios básicos de desarrollo web. Tiene un videotutorial buenísimo sobre <a href="https://www.youtube.com/watch?v=KhzGSHNhnbI" target="_blank" rel="nofollow noopener noreferrer">Angular</a> donde explica de forma muy clara el funcionamiento y uso de este <em>framework</em>.</p>
<h3><a href="https://www.youtube.com/user/learncodeacademy" target="_blank" rel="nofollow noopener noreferrer">LearnCode.academy</a></h3>
<p>Si quieres aprender no solo sobre las nuevas librerías de Javascript, si no también sobre este lenguaje en particular, este canal es el ideal. Ofrece un contenido similar al de Traversy Media, pero lleva más tiempo existiendo y tiene más cantidad de subscriptores. Tiene muy buenos <em>playlis</em>» sobre cómo usar Git y las características del nuevo (por el momento) estándar de Javascript, que es ES 6. Una de las cosas que más me ha gustado de este canal es que también habla sobre que debes aprender dependiendo de en qué campo del desarrollo web te quieras enfocar. También muestra qué tecnologías están siendo más usadas y cuáles ya no lo están siendo tanto.</p>
<h3><a href="https://www.youtube.com/channel/UCtxCXg-UvSnTKPOzLH4wJaQ" target="_blank" rel="nofollow noopener noreferrer">Coding Tech</a></h3>
<p>Coding Tech es bastante diferente a los canales que he listado previamente. Allí puedes encontrar conferencias sobre Rust, GraphQL, Machile Learning, Web Assembly, Go, Electron, entre otros. Desde que conocí este canal me subscribí inmediatamente porque las charlas son muy buenas.</p>
<h3><a href="https://www.youtube.com/channel/UCRxWW_Ncs308nW4An23Yeig" target="_blank" rel="nofollow noopener noreferrer">Simple Programmer</a></h3>
<p>Anteriormente llamado Simple Programmer. Este es un canal más enfocado en las <em>soft skills</em>, que son las habilidades personales que le permiten a uno intereactuar con los demás e intergrarse con éxito en ambientes laborales (en contraste con las <em>hard skills</em>, que son las habilidades específicas necesarias para un trabajo dado). Según dice (medio en broma) el creador del canal, el objetivo de este es enseñarle a los programadores a ser <em>cool</em>. Aquí puedes encontrar contenido a cerca de orientación profesional, cómo aprender rápidamente y cómo promoverte profesionalmente y hacerte <em>marketing</em> a ti mismo como desarrollador de software, entre otras cosas.</p>
<h3><a href="https://www.youtube.com/user/killerphp" target="_blank" rel="nofollow noopener noreferrer">Stefan Mischook</a></h3>
<p>Este es un canal en cierto modo parecido al anterior. El creador es un señor canadiense que trabajó durante mucho tiempo desarrollando aplicaciones web por cuenta propia y haciendo negocios en la industria del software. El canal trata más sobre la experiencia que él ha tenido en su carrera como empresario y todo lo que ha aprendido. También trata algunas cosas sobre orientación profesional. Aquí hay un buen <a href="https://www.youtube.com/watch?v=6OOqROUQ60s" target="_blank" rel="nofollow noopener noreferrer">video</a> como para que tengas una idea de cómo es el canal.</p>
<h3><a href="https://www.youtube.com/channel/UC8butISFwT-Wl7EV0hUK0BQ" target="_blank" rel="nofollow noopener noreferrer">freeCodeCamp</a></h3>
<p>Desde tutoriales hasta entrevistas con expertos, este canal tiene prácticamente todo lo que necesites. Allí puedes encontrar turoriales sobre Vue.js, React.js, Estructuras de datos, Git, varios proyectos para aplicar todas estas tecnologias en cosas útiles, así como charlas y entrevistas con desarrolladores de software que han estado en el negocio por bastante tiempo. Este es el canal del sitio web freecodecamp.org en el que puedes aprender a programar gratis.</p>
<h3><a href="https://www.youtube.com/channel/UCO1cgjhGzsSYb1rsB4bFe4Q" target="_blank" rel="nofollow noopener noreferrer">Fun Fun Function</a></h3>
<p>Descubrí este canal una vez que estaba averiguando qué eran las <em>promises</em> en Javascript y cómo funcionaban. Me encontré este <a href="https://www.youtube.com/watch?v=2d7s3spWAzo" target="_blank" rel="nofollow noopener noreferrer">video</a> que las explica de una manera muy sencilla y entendible. Fun Fun Function es un canal cuyo creador es un programador sueco medio loco que habla más que todo sobre Javascript y sus librerías. El canal es muy interesante y para nada aburridor. Tiene una <em>playlist</em> sobre programación funcional en Javascript que es muy buena y por medio de la cual aprendí a usar <code class="language-plaintext highlighter-rouge">reduce()</code> para modificar un array de una manera bastante interesante (hasta ese momento únicamente había usado ese método para sumar una lista de números).</p>
<h3><a href="https://www.youtube.com/user/shiffman" target="_blank" rel="nofollow noopener noreferrer">The Coding Train</a></h3>
<p>Este es un canal principalmente de tuturiales para construir cosas. Tiene muchísisimos videos sobre construir bots en Node.js, videojuegos, animaciones, así como videoturoriales sobre expresiones regulares, redes neuronales y muchas cosas más.</p>
<h3><a href="https://www.youtube.com/user/Computerphile" target="_blank" rel="nofollow noopener noreferrer">Computerphile</a></h3>
<p>Computefile es un canal que trata sobre temas de computación, pero explicados de un modo más científico. Normalmente entrevistan a un académico sobre temas como inteligencia artificial, criptografía, cómo funciona la memoria, cómo funciona el procesador o sobre ataques informáticos. También publican videos explicando los temas más relevantes en el mundo de la computación del momento. Uno de mis videos favoritos es <a href="https://www.youtube.com/watch?v=3NjQ9b3pgIg" target="_blank" rel="nofollow noopener noreferrer">este</a> que trata sobre cómo escoger una contraseña fuerte (que de hecho me hizo cambiar la contraseña de varias cuentas).</p>
<h3><a href="https://www.youtube.com/user/elithecomputerguy" target="_blank" rel="nofollow noopener noreferrer">Eli the Computer Guy</a></h3>
<p>Este canal no habla tanto de desarrollo de software, pero sí de temas que tiene más que ver con redes y asuntos relacionados con administración de sistemas. Tiene <em>playlists</em> muy buenos sobre redes de computadores, servidores y <em>hacking</em> en general.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Métodos de iteración sobre arrays en Javascript</title>
        <author>
            <name>Jorge</name>
        </author>
        <link href="https://www.jsepulveda.co/metodos-de-iteracion-sobre-arrays-en-javascript.html"/>
        <id>https://www.jsepulveda.co/metodos-de-iteracion-sobre-arrays-en-javascript.html</id>

        <updated>2020-07-21T17:59:09-05:00</updated>
            <summary>
                <![CDATA[
                    En Javascript existen una serie de métodos que nos permiten iterar sobre los elementos de un array de forma sencilla ahorrandonos mucho trabajo. Estos métodos hacen parte de las funciones de orden superior y hacen parte de la programación funcional de Javascript. Digamos que tenemos&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>En Javascript existen una serie de métodos que nos permiten iterar sobre los elementos de un array de forma sencilla ahorrandonos mucho trabajo. Estos métodos hacen parte de las funciones de orden superior y hacen parte de la programación funcional de Javascript.</p>
<p>Digamos que tenemos una lista de números y queremos crear otra lista con cada uno de los elementos multiplicado por dos. Una solución clásica sería crear una función con un ciclo <code class="language-plaintext highlighter-rouge">for</code> que itere sobre cada uno de los elementos multiplicando cada uno de ellos por dos y devuelva la lista de esos elementos. Sería algo así:</p>
<div class="language-javascript highlighter-rouge">
<div class="highlight">
<pre class="highlight"><code style="overflow: hidden;"><span class="kd">let</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">];</span>

<span class="kd">function</span> <span class="nx">multiplicarPorDos</span> <span class="p">(</span><span class="nx">lista</span><span class="p">)</span> <span class="p">{</span>
<span class="kd">  let</span> <span class="nx">array2</span> <span class="o">=</span> <span class="p">[];</span>	

<span class="k">  for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">lista</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
<span class="nx">    array2</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">lista</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">*</span> <span class="mi">2</span><span class="p">);</span>
<span class="p">  }</span>
<span class="k">  return</span> <span class="nx">array2</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">doble</span> <span class="o">=</span> <span class="nx">multiplicarPorDos</span><span class="p">(</span><span class="nx">array</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">doble</span><span class="p">);</span>
<span class="c1">// esto daría [4, 8, 12, 16];</span>
</code></pre>
</div>
</div>
<p>Sin embargo, Javascript trae de fábrica una serie de métodos incorporados en el tipo de datos <em>array</em> que permiten hacer trabajos sobre listas, como el de multiplicar todos sus elemetos por dos, de una forma más fácil y rápida que involucra escribir menos código. A continuación voy a presentar los métodos de iteración sobre arrays más comunes.</p>
<p> </p>
<h1 id="map">Map()</h1>
<p>El método <code class="language-plaintext highlighter-rouge">map()</code> toma como argumentos una función anónima y retorna un nuevo array con los resultados de aplicar esta función una vez sobre cada uno de los elementos del array original. Esta función anónima toma como argumento el elemento sobre el cual el método está iterando (puede tomar dos argumentos más opcionalmente). Veamos cómo podemos refactorizar el código anterior usando este método.</p>
<div class="language-javascript highlighter-rouge">
<div class="highlight">
<pre class="highlight"><code><span class="kd">let</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">];</span>

<span class="kd">let</span> <span class="nx">doble</span> <span class="o">=</span> <span class="nx">array</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">elemento</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="k">  return</span> <span class="nx">elemento</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">});</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">doble</span><span class="p">);</span> <span class="c1">// [4, 8, 12, 16];</span>
</code></pre>
</div>
</div>
<p> </p>
<h1 id="foreach">forEach()</h1>
<p>Este método también ejecuta la función que recibe como argumento una vez por cada uno de los elementos en el array sobre el que este se aplica. A diferencia de <code class="language-plaintext highlighter-rouge">map()</code>, no modifica el array original. la función <em>callback</em> (así se le llama a la función que reciben estos métodos), recibe como argumentos el valor del elemento sobre el cuál se está iterando y otros dos más que no son obligatorios.</p>
<p>Si quisiéramos obtener un nuevo array con cada uno de sus elementos multiplicado por dos, tendríamos que crear un array vacío y agregar los nuevos elementos multiplicados por dos de forma similar a como hicimos al principio con el ciclo for.</p>
<div class="language-javascript highlighter-rouge">
<div class="highlight">
<pre class="highlight"><code><span class="kd">let</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">];</span>
<span class="kd">let</span> <span class="nx">doble</span> <span class="o">=</span> <span class="p">[];</span>

<span class="nx">array</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">elemento</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="nx">  doble</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">elemento</span> <span class="o">*</span> <span class="mi">2</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">doble</span><span class="p">);</span> <span class="c1">// [4, 8, 12, 16];</span>
</code></pre>
</div>
</div>
<p> </p>
<h1 id="find">find()</h1>
<p>Retorna el primer elemento del array que satisface el criterio de la función <em>callback</em> que se le pase. Si no encuentra ningún elemento en el array que cumpla dicho criterio, retorna <code class="language-plaintext highlighter-rouge">undefined</code>.</p>
<div class="language-javascript highlighter-rouge">
<div class="highlight">
<pre class="highlight"><code><span class="kd">let</span> <span class="nx">inventario</span> <span class="o">=</span> <span class="p">[</span>
<span class="p">  {</span><span class="na">elemento</span><span class="p">:</span> <span class="dl">"</span><span class="s2">libros</span><span class="dl">"</span><span class="p">,</span> <span class="na">cantidad</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span>
<span class="p">  {</span><span class="na">elemento</span><span class="p">:</span> <span class="dl">"</span><span class="s2">lapiceros</span><span class="dl">"</span><span class="p">,</span> <span class="na">cantidad</span><span class="p">:</span> <span class="mi">5</span><span class="p">},</span>
<span class="p">  {</span><span class="na">elemento</span><span class="p">:</span> <span class="dl">"</span><span class="s2">borradores</span><span class="dl">"</span><span class="p">,</span> <span class="na">cantidad</span><span class="p">:</span> <span class="mi">3</span><span class="p">}</span>
<span class="p">];</span>

<span class="kd">let</span> <span class="nx">elementoEncontrado</span> <span class="o">=</span> <span class="nx">inventario</span><span class="p">.</span><span class="nx">find</span><span class="p">((</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="k">  return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">cantidad</span> <span class="o">===</span> <span class="mi">5</span><span class="p">;</span>
<span class="p">});</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">elementoEncontrado</span><span class="p">);</span> 
<span class="c1">// imprime en pantalla {elemento: "lapiceros", cantidad: 5}</span>
</code></pre>
</div>
</div>
<p>Una método parecido, <code class="language-plaintext highlighter-rouge">findIndex()</code>, hace hace lo mismo pero devuelve el índice en el que se encuentra el elemento en el array.</p>
<p> </p>
<h1 id="filter">filter()</h1>
<p>Este método recorre cada uno de los elementos del array evaluando si cada uno de ellos cumple con el criterio de la función que recibe de argumento. Si es así, construye un nuevo array con estos elementos que pasan al prueba y retorna este nuevo array sin modificar el original.</p>
<div class="language-javascript highlighter-rouge">
<div class="highlight">
<pre class="highlight"><code><span class="kd">let</span> <span class="nx">inventario</span> <span class="o">=</span> <span class="p">[</span>
<span class="p">  {</span><span class="na">elemento</span><span class="p">:</span> <span class="dl">"</span><span class="s2">libros</span><span class="dl">"</span><span class="p">,</span> <span class="na">cantidad</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span>
<span class="p">  {</span><span class="na">elemento</span><span class="p">:</span> <span class="dl">"</span><span class="s2">lapiceros</span><span class="dl">"</span><span class="p">,</span> <span class="na">cantidad</span><span class="p">:</span> <span class="mi">5</span><span class="p">},</span>
<span class="p">  {</span><span class="na">elemento</span><span class="p">:</span> <span class="dl">"</span><span class="s2">borradores</span><span class="dl">"</span><span class="p">,</span> <span class="na">cantidad</span><span class="p">:</span> <span class="mi">3</span><span class="p">}</span>
<span class="p">];</span>

<span class="kd">let</span> <span class="nx">elementosFiltrados</span> <span class="o">=</span> <span class="nx">inventario</span><span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">cosa</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="k">  return</span> <span class="nx">cosa</span><span class="p">.</span><span class="nx">cantidad</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">!==</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">});</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">elementosFiltrados</span><span class="p">);</span>
<span class="c1">// imprime [{elemento: "lapiceros", cantidad: 5},</span>
<span class="c1">// 	    {elemento: "borradores", cantidad: 3}];</span>
</code></pre>
</div>
</div>
<p> </p>
<h1 id="sort">sort()</h1>
<p>Como su nombre lo indica, <code class="language-plaintext highlighter-rouge">sort()</code> sirve para ordenar los elementos de un array. Por defecto, el orden de los elementos es ascendente y <strong>de acuerdo al valor Unicode de los elementos</strong> (o lo que es lo mismo, al valor que tendrían al convertirse a cadenas). Este método modifica el array original.</p>
<p>Para ordenar un array de números, por ejemplo, debemos pasar un <em>callback</em> con dos parámetros <code class="language-plaintext highlighter-rouge">a</code> y <code class="language-plaintext highlighter-rouge">b</code> de la siguiente manera.</p>
<div class="language-javascript highlighter-rouge">
<div class="highlight">
<pre class="highlight"><code><span class="kd">let</span> <span class="nx">numeros</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>

<span class="nx">numeros</span><span class="p">.</span><span class="nx">sort</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">-</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">});</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numeros</span><span class="p">);</span> <span class="c1">// [1, 2, 3, 4, 5]</span>
</code></pre>
</div>
</div>
<p>Ahora digamos que queremos ordenar un array de objetos de acuerdo a una de sus propiedades que es de tipo <code class="language-plaintext highlighter-rouge">string</code>. En este caso debemos pasar un <em>callback</em> también con dos valores (<code class="language-plaintext highlighter-rouge">a y b</code>) y hacer una comparación entre estos dos. si <code class="language-plaintext highlighter-rouge">a &lt; b</code> debemos devolver -1, si <code class="language-plaintext highlighter-rouge">a &gt; b</code> devolvemos 1 y si son iguales, 0.</p>
<div class="language-javascript highlighter-rouge">
<div class="highlight">
<pre class="highlight"><code><span class="kd">let</span> <span class="nx">inventario</span> <span class="o">=</span> <span class="p">[</span>
<span class="p">  {</span><span class="na">elemento</span><span class="p">:</span> <span class="dl">"</span><span class="s2">libros</span><span class="dl">"</span><span class="p">,</span> <span class="na">cantidad</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span>
<span class="p">  {</span><span class="na">elemento</span><span class="p">:</span> <span class="dl">"</span><span class="s2">lapiceros</span><span class="dl">"</span><span class="p">,</span> <span class="na">cantidad</span><span class="p">:</span> <span class="mi">5</span><span class="p">},</span>
<span class="p">  {</span><span class="na">elemento</span><span class="p">:</span> <span class="dl">"</span><span class="s2">borradores</span><span class="dl">"</span><span class="p">,</span> <span class="na">cantidad</span><span class="p">:</span> <span class="mi">3</span><span class="p">}</span>
<span class="p">];</span>

<span class="nx">inventario</span><span class="p">.</span><span class="nx">sort</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="k">  if</span> <span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">elemento</span> <span class="o">&gt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">elemento</span><span class="p">)</span> <span class="p">{</span>
<span class="k">    return</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">  }</span>
<span class="k">  if</span> <span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">elemento</span> <span class="o">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">elemento</span><span class="p">)</span> <span class="p">{</span>
<span class="k">    return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
<span class="p">  }</span>
<span class="k">  return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">});</span>
</code></pre>
</div>
</div>
<p>Esto ordenaría el array <code class="language-plaintext highlighter-rouge">inventario</code> de acuerdo a la propiedad <code class="language-plaintext highlighter-rouge">elemento</code> en orden alfabético.</p>
<p> </p>
<h1 id="some">some()</h1>
<p>Si lo que queremos es comprobar si cierto elemento en un array comple con cierta condición, podemos pasar un <em>callback</em> a este método. Este recibe el elemento actual sobre el que se está actuando en el array (opcionalmente puede recibir hasta tres argumentos más) y retorna <code class="language-plaintext highlighter-rouge">true</code> si alguno de los elementos cumple con la condición. En caso contrario retorna <code class="language-plaintext highlighter-rouge">false</code>.</p>
<div class="language-javascript highlighter-rouge">
<div class="highlight">
<pre class="highlight"><code><span class="kd">let</span> <span class="nx">numeros</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>

<span class="kd">let</span> <span class="nx">cumpleCondicion1</span> <span class="o">=</span> <span class="nx">numeros</span><span class="p">.</span><span class="nx">some</span><span class="p">((</span><span class="nx">numero</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span>  <span class="nx">numero</span> <span class="o">&gt;</span> <span class="mi">4</span><span class="p">;</span>
<span class="p">});</span>

<span class="kd">let</span> <span class="nx">cumpleCondicion2</span> <span class="o">=</span> <span class="nx">numeros</span><span class="p">.</span><span class="nx">some</span><span class="p">((</span><span class="nx">numero</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span>  <span class="nx">numero</span> <span class="o">&gt;</span> <span class="mi">6</span><span class="p">;</span>
<span class="p">});</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">cumpleCondicion1</span><span class="p">,</span> <span class="nx">cumpleCondicion2</span><span class="p">);</span>
<span class="c1">// imprime true false</span>
</code></pre>
</div>
</div>
<p>Adicionalmente esta método está <code class="language-plaintext highlighter-rouge">every()</code>, que retorna <code class="language-plaintext highlighter-rouge">true</code> si <strong>todos</strong> los elementos cumplen la condición y <code class="language-plaintext highlighter-rouge">false</code> en caso contrario.</p>
<p> </p>
<h1 id="reduce">reduce()</h1>
<p>Finalmente llegamos al último método del que voy a hablar en este artículo. Es mi favorito también. Este método recibe un <em>callback</em> y un valor inicial que es opcional como argumentos. Si no se provee un valor inicial, el valor por defecto de este será el primer elemento del array. El <em>callback</em> a su vez recibe dos argumentos: uno para el acumulador y otro para el valor actual (dos argumentos más se pueden proveer, pero son opcionales). Lo que hace este método es <em>reducir</em> el array a un único valor de acuerdo a la aplicación algoritmo de la función <em>callback</em> sobre cada uno de los elementos del array. Vamos a ilustrarlo con un ejemplo sencillo.</p>
<div class="language-javascript highlighter-rouge">
<div class="highlight">
<pre class="highlight"><code><span class="kd">let</span> <span class="nx">numeros</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>

<span class="kd">let</span> <span class="nx">suma</span> <span class="o">=</span> <span class="nx">numeros</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">acumulador</span><span class="p">,</span> <span class="nx">valorActual</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">acumulador</span> <span class="o">+</span> <span class="nx">valorActual</span><span class="p">;</span>
<span class="p">});</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">suma</span><span class="p">);</span> <span class="c1">// 15</span>
</code></pre>
</div>
</div>
<p>Como vemos, lo que hicimos aquí fue sumar los valores del array y guardar ese valor en <code class="language-plaintext highlighter-rouge">suma</code>. Como no pasamos un valor inicial, el primer elemento del array (<code class="language-plaintext highlighter-rouge">4</code>) tomó el lugar del <code class="language-plaintext highlighter-rouge">acumulador</code> y procedimos a sumar <code class="language-plaintext highlighter-rouge">acumulador</code> con <code class="language-plaintext highlighter-rouge">valorActual</code>. El resultado de esa suma se asigna al parámetro <code class="language-plaintext highlighter-rouge">acumulador</code> y se procede a hacer la suma de este con el siguiente elemento en el array, que sería el valor 2. Y así sucesivamente se van sumando los elementos en el array y guardando el valor de esta suma en <code class="language-plaintext highlighter-rouge">acumulador</code>, que se retorna al final una vez se haya ejecutado el <em>callback</em> en todos los elementos del array.</p>
<div class="language-javascript highlighter-rouge">
<div class="highlight">
<pre class="highlight"><code><span class="kd">let</span> <span class="nx">inventario</span> <span class="o">=</span> <span class="p">[</span>
<span class="p">  {</span><span class="na">elemento</span><span class="p">:</span> <span class="dl">"</span><span class="s2">libros</span><span class="dl">"</span><span class="p">,</span> <span class="na">cantidad</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span>
<span class="p">  {</span><span class="na">elemento</span><span class="p">:</span> <span class="dl">"</span><span class="s2">lapiceros</span><span class="dl">"</span><span class="p">,</span> <span class="na">cantidad</span><span class="p">:</span> <span class="mi">5</span><span class="p">},</span>
<span class="p">  {</span><span class="na">elemento</span><span class="p">:</span> <span class="dl">"</span><span class="s2">borradores</span><span class="dl">"</span><span class="p">,</span> <span class="na">cantidad</span><span class="p">:</span> <span class="mi">3</span><span class="p">}</span>
<span class="p">];</span>

<span class="c1">// vamos a sacar todos los inventario.elemento en un solo array</span>

<span class="kd">let</span> <span class="nx">elementos</span> <span class="o">=</span> <span class="nx">inventario</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">acumulador</span><span class="p">,</span> <span class="nx">actual</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="nx">  acumulador</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">actual</span><span class="p">.</span><span class="nx">elemento</span><span class="p">);</span>
<span class="k">  return</span> <span class="nx">acumulador</span><span class="p">;</span>	
<span class="p">},</span> <span class="p">[]);</span> <span class="c1">// pasamos un array vacío como segundo argumento</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">elementos</span><span class="p">)</span>
<span class="c1">// ["libros", "lapiceros", "borradores"]</span>
</code></pre>
</div>
</div>
<p><br>En resumen, <code class="language-plaintext highlighter-rouge">reduce()</code> nos sirve para hacer lo mismo que podríamos hacer <code class="language-plaintext highlighter-rouge">map()</code> o con los otros métodos que retornaban arrays al pasarlos por una función. Este método en últimas lo que hace es tomar el valor inicial, hacer alguna operación con este y con el valor actual que se esté procesando en el <em>callback</em> y reemplazar su propio valor por el resultado de esa operación.Después procede a realizar el mismo procedimiento con el siguiente elemento en el array y así sucesivamente hasta haber recorrido todos sus elemetos, retornando su valor al final.</p>
<p>Para una completa descripción de todos los métodos y su utilización, además de detalles sobre la eficiencia del algoritmo que utilizan, puedes visitar la documentación de <a href="https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Array" target="_blank" rel="nofollow noopener noreferrer">Mozilla.org</a> o también la documentación de <a href="https://www.w3schools.com/jsref/jsref_obj_array.asp" target="_blank" rel="nofollow noopener noreferrer">w3schools</a> (en inglés).</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Callbacks vs. promises en Javascript</title>
        <author>
            <name>Jorge</name>
        </author>
        <link href="https://www.jsepulveda.co/callbacks-vs-promises-en-javascript.html"/>
        <id>https://www.jsepulveda.co/callbacks-vs-promises-en-javascript.html</id>

        <updated>2020-07-21T17:59:09-05:00</updated>
            <summary>
                <![CDATA[
                    Cuando hablamos de operaciones asíncronas, nos referimos a aquellas operaciones que no bloquean el hilo principal de Javascript cuando hacen alguna petición a la red o de entrada y salida del disco duro. El efecto de esto es que el código no se ejecuta siempre&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Cuando hablamos de operaciones asíncronas, nos referimos a aquellas operaciones que no bloquean el hilo principal de Javascript cuando hacen alguna petición a la red o de entrada y salida del disco duro. El efecto de esto es que el código no se ejecuta siempre en secuencia (línea tras línea), sino que cuando el flujo de ejecución se encuentra con una operación asíncrona, no espera a que esta termine (no bloquea la ejecución hasta obtener la respuesta del servidor o la carga del archivo desde el disco a la memoria). En su lugar, sigue y ejecuta las siguientes líneas de código que estén más abajo. Una vez que la operación asíncrona se haya completado y se tenga una respuesta, se ejecuta el código de una función <em>callback</em>.</p>
<p>Las promesas o <em>Promises</em> en Javascript nos permiten trabajar con procesos asíncronos de forma más fácil y eficiente. Con ellas podemos reemplazar los <em>callbacks</em> que se le pasan a las procesos asíncronos y nos facilitan mucho las cosas cuando tenemos que ejecutar varios en secuencia.</p>
<p>Vamos a cargar un archivo asíncronamente desde el disco duro con Node.js</p>
<div class="language-javascript highlighter-rouge">
<div class="highlight">
<pre class="highlight"><code><span class="kd">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">fs</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="dl">'</span><span class="s1">libros.txt</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">utf8</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">libros</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="k">throw</span> <span class="nx">error</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">libros</span><span class="p">);</span>
<span class="p">});</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">leyendo libros.txt</span><span class="dl">'</span><span class="p">);</span>
</code></pre>
</div>
</div>
<p>Así es como cargamos un archivo a la memoria usando el módulo <code class="language-plaintext highlighter-rouge">fs</code> (file system) de Node.js de forma asíncrona.</p>
<p>El programa primero importa el módulo <code class="language-plaintext highlighter-rouge">fs</code>. Luego lo usa para leer del disco el archivo libros.txt. La última línea se ejecuta inmediatamante después y el programa imprime <code class="language-plaintext highlighter-rouge">leyendo libro.txt</code>. ¿No se suponía que la línea que imprime los libros por pantalla debería ejecutarse primero? No, pues esta es una operación asíncrona y el código no se bloquea para esperar a que el programa lea el archivo desde el disco; este sigue y una vez tenga el archivo cargado, ejecuta las líneas dentro de la función <em>callback</em>. Si hubo un error leyendo libros.txt (en caso de que el archivo no exista, por ejemplo), lanzamos un error. Si por el contrario todo salió bien, usamos <code class="language-plaintext highlighter-rouge">console.log(libros)</code> para mostrar el contenido del archivo.</p>
<p>En este caso usamos una función <em>callback</em> que se ejecuta una vez se haya completado la lectura del archivo. Con ella nos hacemos cargo de qué pasa si algo sale mal y también de lo que vamos a hacer una vez hayamos leído el archivo.</p>
<p>Sin embargo, comenzamos a tener problemas de legibilidad en nuestro código cuando tenemos que realizar otras operaciónes asíncronas una vez la primera se haya completado.</p>
<p>Digamos que queremos leer los archivos <code class="language-plaintext highlighter-rouge">autores.txt</code> y <code class="language-plaintext highlighter-rouge">temas.txt</code> una vez hayamos cargado <code class="language-plaintext highlighter-rouge">libros.txt</code> para imprimir el contenido de estos tres archivos por pantalla al tiempo y en el mismo orden en que los cargamos.</p>
<p>Como vimos anteriormente, no podemos poner al un método <code class="language-plaintext highlighter-rouge">fs.readFile()</code> por cada uno de los archivos uno debajo de la otro y esperar que se ejecuten y retornen el contenido de los archivos en secuencia, pues son operaciones asíncronas. En lugar de eso, tendríamos que poner el código para leer los otros dos archivos dentro del <em>callback</em> para leer <code class="language-plaintext highlighter-rouge">libros.txt</code>. Tendríamos que anidar uno dentro del otro.</p>
<div class="language-javascript highlighter-rouge">
<div class="highlight">
<pre class="highlight"><code><span class="kd">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">fs</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">let</span> <span class="nx">libros</span><span class="p">,</span> <span class="nx">autores</span><span class="p">,</span> <span class="nx">temas</span><span class="p">;</span>

<span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="dl">'</span><span class="s1">libros.txt</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">utf8</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">libros</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="k">throw</span> <span class="nx">error</span><span class="p">;</span>
  <span class="nx">libros</span> <span class="o">=</span> <span class="nx">libros</span><span class="p">;</span>
  <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="dl">'</span><span class="s1">autores.txt</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">utf8</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">autores</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="k">throw</span> <span class="nx">error</span><span class="p">;</span>
    <span class="nx">autores</span> <span class="o">=</span> <span class="nx">autores</span><span class="p">;</span>
    <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="dl">'</span><span class="s1">temas.txt</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">utf8</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">temas</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="k">throw</span> <span class="nx">error</span><span class="p">;</span>
      <span class="nx">temas</span> <span class="o">=</span> <span class="nx">temas</span><span class="p">;</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">libros:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">libros</span><span class="p">);</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">autores:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">autores</span><span class="p">);</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">temas:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">temas</span><span class="p">);</span>
    <span class="p">});</span>
  <span class="p">});</span>
<span class="p">});</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">cargando archivos...</span><span class="dl">'</span><span class="p">);</span>
</code></pre>
</div>
</div>
<p>Anidar nuestras solicitudes asíncronas garantiza que se ejecuten una tras otra y en el orden que nosotros definimos. Al final, en el último nivel de anidación, imprimimos el contenido de todos los archivos que cargamos.</p>
<p>Sin embargo, hay un problema con el uso de los <em>callbacks</em>: entre más procesos asíncronos como estos tengamos, más necesitaremos anidar unas cosas dentro de otras. ¿Qué si por ejemplo tenemos diez archivos por cargar? Tendríamos diez niveles de identación en nuestro código. Nuestro código se vería de forma piramidal. Esto da lugar a la famosa pirámide de la muerte de los <em>callbacks</em>. Además este modo de hacer las cosas impide que los procesos se realicen en paralelo, aumentanando el tiempo de espera para la carga de los archivos.</p>
<p>Es aquí donde las promesas or <em>Promises</em> llegan al rescate. Estas funcionan de forma similar a las promesas en la vida real. Son una promesa de que vamos a obtener un resultado de un proceso asíncrono, ya sea que este se realize satisfactoriamente o que falle. Una promesa solo puede completarse con éxito o fallar una vez. Para encargarnos de estos dos escenarios, adjuntamos un método <code class="language-plaintext highlighter-rouge">then()</code> para el primer caso y un <code class="language-plaintext highlighter-rouge">catch()</code> para el segundo a la función asíncrona que retorne una <em>Promise</em>. Esto nos evita utilizar <em>callbacks</em>. Miremos un pequeño ejemplo.</p>
<div class="language-javascript highlighter-rouge">
<div class="highlight">
<pre class="highlight"><code><span class="nx">cargarArchivo</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">archivo</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">archivo</span><span class="p">);</span>
<span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
<span class="p">});</span>
</code></pre>
</div>
</div>
<p>Si la función asíncrona <code class="language-plaintext highlighter-rouge">cargarArchivo()</code> retorna una promesa, podemos adjuntar un <code class="language-plaintext highlighter-rouge">then()</code> a esta para procesar la resolución exitosa de la promesa (cargamos el archivo con éxito). Adjuntamos un <code class="language-plaintext highlighter-rouge">catch()</code> para <em>capturar</em> el error y hacer algo con él en caso de que algo haya salido mal (en este caso simplemente lo imprimimos por pantalla).</p>
<p>¿Y por qué es importante esto? Las promesas nos evitan usar <em>callbacks</em> y tener que anidar uno dentro del otro para realizar varios procesos asíncronos que se van a ejecutar en secuencia. Cada <code class="language-plaintext highlighter-rouge">then()</code> retorna a su vez una promesa a la cual le podemos adjuntar otro <code class="language-plaintext highlighter-rouge">then()</code>. Podemos encadenar varios procesos asíncronos uno tras otro y ejecutarlos como si fueran síncronos. Veamos cómo se vería la carga de tres archivos con <em>Promises</em> en lugar de <em>callbacks</em>.</p>
<div class="language-javascript highlighter-rouge">
<div class="highlight">
<pre class="highlight"><code><span class="kd">let</span> <span class="nx">libros</span><span class="p">,</span> <span class="nx">autores</span><span class="p">,</span> <span class="nx">temas</span><span class="p">;</span>

<span class="nx">cargarLibros</span><span class="p">()</span>
<span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">books</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">libros</span> <span class="o">=</span> <span class="nx">books</span><span class="p">;</span>
  <span class="k">return</span> <span class="nx">cargarAutores</span><span class="p">();</span>
<span class="p">})</span>
<span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">authors</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">autores</span> <span class="o">=</span> <span class="nx">authors</span><span class="p">;</span>
  <span class="k">return</span> <span class="nx">cargarTemas</span><span class="p">();</span>
<span class="p">})</span>
<span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">topics</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">temas</span> <span class="o">=</span> <span class="nx">topics</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">libros:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">libros</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">autores:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">autores</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">temas:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">temas</span><span class="p">);</span>
<span class="p">})</span>
<span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">hubo un error cargando algún archivo</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
</code></pre>
</div>
</div>
<p>¿Sí ves cuán legible es el código? Ya no tenemos que hacer anidaciones y terminar con una pirámide de la muerte de <em>callbacks</em>. Para que esto se pueda hacer así, las funciones <code class="language-plaintext highlighter-rouge">cargarLibros()</code>, <code class="language-plaintext highlighter-rouge">cargarAutores()</code> y <code class="language-plaintext highlighter-rouge">cargarTemas()</code> deben retornar cada una una <em>Promise</em>. cuando la promesa de la primera función termina de cargar los libros, el primer <code class="language-plaintext highlighter-rouge">then()</code> captura el resultado y retorna la siguiente función para cargar los autores. Una vez tenemos cargado el archivo de autores, en el siguiene <code class="language-plaintext highlighter-rouge">then()</code> retornamos función para cargar los temas. Una vez se haya cargado este último archivo, procedemos a imprimir las variables que fuimos asignando para libros, autores y temas. Como ves, el código se ejecuta secuencialmente como si fuera síncrono. El último método que adjuntamos a la cadena de promesas (<code class="language-plaintext highlighter-rouge">catch()</code>) captura el error que haya ocurrido en cualquier eslabón de la cadena de <code class="language-plaintext highlighter-rouge">then()s</code>. Si la carga de aĺguno de los archivos falla, el error es capturado por el <code class="language-plaintext highlighter-rouge">catch()</code> y desde allí lo podemos manejar (en nuestro caso, solo imprimimos en pantalla que hubo un error).</p>
<p>Ahora bien, ¿es posible entonces adjuntar un .then() al método <code class="language-plaintext highlighter-rouge">fs.readFile()</code> y refactorizar el mismo código usando prómises, como hicimos en el ejemplo anterior? Por desgracia, no es así de fácil: este método no retorna promesas. No obstante, podemos crear una función que lea archivos desde el disco duro usando este mismo método y haciendo que retorne une una <em>Promise</em>.</p>
<p>A continuación vamos a ver cómo podemos usar el constructor del patrón <em>Promise</em> para instanciar una nueva promesa y hacer que nuestra función de leer archivos desde el disco retorne una <em>Promise</em> para poderle adjuntar los métodos <code class="language-plaintext highlighter-rouge">then()</code> y <code class="language-plaintext highlighter-rouge">catch()</code>.</p>
<div class="language-javascript highlighter-rouge">
<div class="highlight">
<pre class="highlight"><code><span class="kd">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">fs</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">let</span> <span class="nx">libros</span><span class="p">,</span> <span class="nx">autores</span><span class="p">,</span> <span class="nx">temas</span><span class="p">;</span>

<span class="c1">// creamos una función asíncrona que retorne una Promise</span>
<span class="kd">function</span> <span class="nx">cargarArchivo</span><span class="p">(</span><span class="nx">archivo</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">archivo</span><span class="p">,</span> <span class="dl">'</span><span class="s1">utf8</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">datos</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="nx">reject</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
      <span class="nx">resolve</span><span class="p">(</span><span class="nx">datos</span><span class="p">);</span>
    <span class="p">});</span>
  <span class="p">});</span>
<span class="p">}</span>
<span class="c1">// ahora sí podemos usar .then() y .catch()</span>
<span class="nx">cargarArchivo</span><span class="p">(</span><span class="dl">'</span><span class="s1">libros.txt</span><span class="dl">'</span><span class="p">)</span>
<span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">books</span> <span class="o">=&gt;</span> <span class="p">{</span> 
  <span class="nx">libros</span> <span class="o">=</span> <span class="nx">books</span><span class="p">;</span>
  <span class="k">return</span> <span class="nx">cargarArchivo</span><span class="p">(</span><span class="dl">'</span><span class="s1">autores.txt</span><span class="dl">'</span><span class="p">);</span>
<span class="p">})</span>
<span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">authors</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">autores</span> <span class="o">=</span> <span class="nx">authors</span><span class="p">;</span>
  <span class="k">return</span> <span class="nx">cargarArchivo</span><span class="p">(</span><span class="dl">'</span><span class="s1">temas.txt</span><span class="dl">'</span><span class="p">);</span>
<span class="p">})</span>
<span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">topics</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">temas</span> <span class="o">=</span> <span class="nx">topics</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">libros:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">libros</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">autores:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">autores</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">temas:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">temas</span><span class="p">);</span>
<span class="p">})</span>
<span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">hubo un error cargando algún archivo</span><span class="dl">'</span><span class="p">)</span>
<span class="p">});</span> <span class="c1">// si ocurre algún error cargando cualquier archivo</span>
</code></pre>
</div>
</div>
<p>El constructor de <em>Promise</em> recibe una función anónima con dos argumentos: <code class="language-plaintext highlighter-rouge">resolve</code> y <code class="language-plaintext highlighter-rouge">reject</code>. El primero resuelve la promesa si su resultado fue exitoso (retornandola para ser procesada posteriormente por un <code class="language-plaintext highlighter-rouge">then</code>), mientras que el segundo la rechaza si hubo un error (en cuyo caso es recolectado por el <code class="language-plaintext highlighter-rouge">catch</code>).</p>
<p>Lo aprendido hasta ahora nos muestra cómo podemos refactorizar nuestro código para que sea más legible. Sin embargo, hay una forma de hacerlo también más eficiente.</p>
<p>Las <em>Promises</em> tienen un método llamado <code class="language-plaintext highlighter-rouge">all</code> que permite resolverlas en paralelo. Consideremos el siguiente código para ilustrar su uso.</p>
<div class="language-javascript highlighter-rouge">
<div class="highlight">
<pre class="highlight"><code><span class="c1">// definición de la función cargarArchivo()</span>
<span class="c1">// y declaración de las variables</span>

<span class="nb">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">([</span>
  <span class="nx">cargarArchivo</span><span class="p">(</span><span class="dl">'</span><span class="s1">libros.txt</span><span class="dl">'</span><span class="p">),</span>
  <span class="nx">cargarArchivo</span><span class="p">(</span><span class="dl">'</span><span class="s1">autores.txt</span><span class="dl">'</span><span class="p">),</span>
  <span class="nx">cargarArchivo</span><span class="p">(</span><span class="dl">'</span><span class="s1">temas.txt</span><span class="dl">'</span><span class="p">)</span>
<span class="p">])</span>
<span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">archivos</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="c1">// retorna un array con las promesas resueltas</span>
  <span class="nx">libros</span> <span class="o">=</span> <span class="nx">archivos</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
  <span class="nx">autores</span> <span class="o">=</span> <span class="nx">archivos</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
  <span class="nx">temas</span> <span class="o">=</span> <span class="nx">archivos</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
<span class="p">})</span>
<span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">hubo un error cargando algún archivo</span><span class="dl">'</span><span class="p">)</span>
<span class="p">});</span>
</code></pre>
</div>
</div>
<p>Este método recibe un array con las <em>Promises</em> y las resuelve todas en paralelo en el mismo orden. Retorna un array con la lista de los resultados una vez que <strong>todas las Promises hayan sido resueltas</strong>. Si ocurre un error en <strong>alguna</strong> de estas, <code class="language-plaintext highlighter-rouge">Promise.all()</code> va a rechazar las promesas y el error será capturado por <code class="language-plaintext highlighter-rouge">catch()</code>, sin importar si las demás ya resolvieron. Es buena práctica que siempre pongas un catch() al final para manejar los errores.</p>
<p>Espero que esta introducción (un poco larga) a las <em>Promises</em> como alternativa a los clásicos <em>callbacks</em> haya sido lo suficientemente clara y concisa. Si quieres profundizar más sobre el funcionamiento de este patrón junto con sus especificaciones y usos, busca en Google… No mentiras: la documentación de <a href="https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Promise/all" target="_blank" rel="noopener">Mozilla.org</a> ofrece una buena gía al respecto. También la de <a href="https://developers.google.com/web/fundamentals/primers/promises?hl=es" target="_blank" rel="noopener">Google developers</a>.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Cómo aprender inglés efectivamente</title>
        <author>
            <name>Jorge</name>
        </author>
        <link href="https://www.jsepulveda.co/como-aprender-ingles-efectivamente.html"/>
        <id>https://www.jsepulveda.co/como-aprender-ingles-efectivamente.html</id>
            <category term="Inglés"/>
            <category term="Aprendizaje"/>

        <updated>2020-07-21T17:59:09-05:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://www.jsepulveda.co/media/posts/1/english-2724442_1280.jpg" alt="Banner sobre el idioma inglés" />
                    Seguramente has escuchado que aprender inglés es muy importante porque te abre muchas puertas y oportunidades en tu profesión o carrera. Tal vez intentaste aprender inglés después de enterarte de lo importante que era el idioma y empezaste un curso o comenzaste a estudiar por&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://www.jsepulveda.co/media/posts/1/english-2724442_1280.jpg" alt="Banner sobre el idioma inglés" />
                <p>Seguramente has escuchado que aprender inglés es muy importante porque te abre muchas puertas y oportunidades en tu profesión o carrera. Tal vez intentaste aprender inglés después de enterarte de lo importante que era el idioma y empezaste un curso o comenzaste a estudiar por tu cuenta, pero lo abandonaste o te diste cuenta de que por más niveles que hacías, no obtenías el progreso que querías. Si te ha pasado eso alguna vez, sigue leyendo porque voy a mostrarte en este artículo una manera más efectiva de apender inglés por tu cuenta de tal forma que saques el mejor provecho: se llama aprendizaje por inmersión.</p>
<p>Primero que nada, es bueno dejar claro qué nivel de dominio sobre el idioma quieres conseguir. Cuando aprendes un idioma, debes desarrollar la capacidad para leerlo, escucharlo, escribirlo y hablarlo. Básicamente la capacidad para entenderlo y para expresarte fluidamente en él. Para la mayor parte de la gente con el simple hecho de entenderlo, es decir, de poder leer y entender lo que la gente dice (por ejemplo en un video) basta. La hablidad de poder hablarlo, si bien nos interesa, no es nuestra prioridad porque el principal uso del inglés lo vamos a hacer recibiendo información, ya sea leyendo en o escuchando contenido en inglés. La buena noticia es que esa parte del aprendizaje de un idioma es la más fácil y rápida de dominar.</p>
<p>Durante mucho tiempo intenté aprender inglés yendo a clases y estudiando de algún libro. A pesar de rendir bastante bien en el curso, no adquiría el nivel de fuidez que me hubera gustado tener; si quería ver una película para la cuál no encontraba subtítulos en español, no podía entender mayor cosa. También me costaba mucho leer en inglés algún artículo y tenía que buscar constantemente las palabras que no entendía en un diccionario. Algo nada práctico. También comencé a hacer una lista de las palabras que no entendía, pero de nada servía porque nunca la revisaba y tampoco me iba muy bien estudiando el idioma de los libros de las clases ¡porque eso era supremamente aburridor!</p>
<p>Pasó cierto tiempo sin que hiciera mayor progreso en mi aprendizaje del inglés hasta que cambié la estrategia: en lugar de leer los libros de estudio y hacer listas de palabras de los textos que leía, comencé a leer cosas que realmente me gustaran. Empecé a leer artículos sobre techología y ciencia que realmente quería leer no por estudiar inglés, sino por el contenido de estos. Cuando me encontraba con alguna palabra que no conociera, la buscaba en al traductor de google, pero nunca la anotaba. La dejaba ir. Sabía que si la anotaba junto con su significado, no la iba a revisar después para aprendermela. Con el tiempo descubrí que cada vez necesitaba buscar menos palabras, pues mi vocabulario iba aumentando a medida que leía más y más.</p>
<p>La estratégia de aprendizaje que quiero presentar, y que a mí me ha funcionado tanto, se trata de estudiar por cuenta propia leyendo y escuchando sobre temas que realmente te interesen. No los aburridos libros que enseñan cómo aprender inglés. No los libros de gramática que te muestran cómo conjugar el verbo «to be». Eso es algo que mucha gente no disfruta hacer, y en consecuencia tienen más probabilidades de dejarlo de hacer antes de conseguir resultados notables.</p>
<h2 id="empieza-por-lo-más-fácil">Empieza por lo más fácil</h2>
<p>Busca en internet artículos sobre temas que te gusten. Lee por el contenido mismo de los artículos. Todos tenemos un mínimo de conocimiento en gramática y vocabulario de lo que aprendimos en el colegio, en la universidad, o en algún curso de inglés que te va a permitir más o menos entender lo que leas. Empieza a leer artículos fáciles de entender: si ten gustan los cuentos, puedes empezar por ahí. Estos tienen una gramática sencilla y te ayudan a adquirir vocabulario. Lo más importante de todo es que busques algo que realmente disfrutes leer. Si te gustan los negocios, lee sobre eso. Si te gustan las noticias sobre tecnología, busca información sobre eso. En internet hay muchos sitios que puedes visitar para ello.</p>
<h2 id="no-estudies">No estudies</h2>
<p>Puede sonar contradictorio que quieras aprender un idioma del cual no vas a estudiar nada. El punto aquí es aprender inglés en actividades que te guste hacer, y estudiar no es una de ellas para la mayoría. No hagas listas de palabras. Si no entiendes alguna, búscala en el diccionario pero no la anotes en un cuaderno para repasarla después. Déjala ir. Si esta es una palabra que se usa con relativa frecuencia, te la vas a encontrar otra vez. Si no te aprendiste lo que significaba en la siguiente ocasión, búscala de nuevo. Es probable que te la encuentres muchas veces más y que la tengas que buscar una y otra vez. Eso es normal. Después de que te la hayas encontrado la suficiente cantidad de veces, te la vas a aprender y no vas a tenerla que buscar más. Usa una herramienta como google traductor en lugar de un diccionario regular.</p>
<h2 id="aprende-a-buscar-significados">Aprende a buscar significados</h2>
<p>Una palabra en inglés puede tener distintos significados dependiendo de si se trata de un verbo o un sustantivo (una misma palabra se puede usar como verbo, sustantivo o adjetivo). Para saber el significado más preciso de una palabra cuando la busques, mira qué rol juega esta en la oración. Los adjetivos en inglés van antes del sustantivo: the <strong>red</strong> flag, the <strong>fat</strong> dog. La palabra <em>fat</em> en este último caso significa gordo, pero también puede significar grasa en otros contextos. <em>Milk</em> como sustantivo quiere decir leche, pero la frase «they milk the cow» no es «ellos leche la vaca», sino «ellos <em>ordeñan</em> la vaca». Si una palabra está justo después de un sustantivo, entonces es un verbo y debes buscarla como tal. I hope that makes sense.</p>
<h2 id="desarrolla-el-oído">Desarrolla el oído</h2>
<p>Cuando ya lleves bastante tiempo leyendo cosas en inglés, comienza a esuchar en inglés. Si ya entiendes casi todo lo que lees sin necesidad de buscar tanto el significado de las palabras, empieza a entrenar tu oído para entender inglés escuchándolo. Te recomiendo que al principio busques audios con la transcripción escrita de lo que estos dicen. Puedes buscar videos en youtube con subtítulos y comenzar a verlos.</p>
<h2 id="utiliza-los-recursos-disponibles">Utiliza los recursos disponibles</h2>
<p>Hay muchos recursos para aprender inglés de los cuales puedes sacar ventaja. Si vas a leer, busca artículos, noticias o blogs sobre lo que quieras leer. <a href="https://medium.com/" target="_blank" rel="noopener">Medium</a> es un sitio web para blogs donde puedes encontrar artículos sobre diversos temas. En youtube hay muchísimos canales y videos que puedes ver también. Puedes buscar allí las charlas de TED, donde gente de todo el mundo comparte sus ideas, por ejemplo. No te limites tampoco al google traductor. Este es limitado y no va a poder ofrecerte traducciones de todo lo que necesites. Hay otros sitios en internet que te pueden servir para buscar significados de palabras y expresiones en inglés. Está <a href="http://www.wordreference.com/" target="_blank" rel="noopener">Wordreference</a> , <a href="https://www.urbandictionary.com/" target="_blank" rel="noopener">Urban Dictionary</a> además de los foros de idiomas.</p>
<h2 id="ten-cuidado-con-los-idioms">Ten cuidado con los <em>idioms</em></h2>
<p>“Beat around the bush”, “Feel a bit under the weather”, “Hit the nail on the head”… What the hell is all that? Hay ciertas frases en inglés cuyo significado no se puede predecir por las palabras que la conforman. Esto puede resultar en cierta confusión al principio. Cuando te encuentres con frases cuyo significado no entiendas, es probable que estés ante una frase idiomática o modismo. En español también existen tales expresiones, como por ejemplo “tomar del pelo” o “meter la pata”. Estas no tinen nada que ver con lo que significan literalmante las palabras que las conforman. En tales casos, te recomiendo que busques el significado de toda la frase en Google on en algún foro de idiomas.</p>
<h2 id="sé-constante">Sé constante</h2>
<p>Aprender un idioma no es dificil, pero requiere una gran cantidad de tiempo. Al principio no vas a entender mucho y vas a tener que buscar con mucha frecuencia las palabras que no entiendas. No obstante, entre más leas y te <em>expongas</em> al idioma, más fácil te va a resultar entenderlo junto sus formas de expresar las cosas. Lo que automáticamente nos lleva el siguiente punto</p>
<h2 id="ten-paciencia">Ten paciencia</h2>
<p>Para adquirir suficiente dominio en el inglés necesitas conocer el significado de muchas palabras y algunas normas de gramática que irás reconociendo a medida que te vayas familiarizando con el idoma. A pesar de que en los idomas hay decenas de miles de palabras, las que más se usan en el 90-95% de los casos normalmente no superan las mil. Sin embargo conocer toda esa cantidad de palabras requiere una buena inversión de tiempo. Puede que a veces sientas que no estás dando progresos, pero ten paciencia y continua aprendiendo. Con el tiempo llegará el punto en el que entender inglés ya no te va a costar tanto trabajo, ya casi no vas a tener que buscar el significado de las palabras porque te las vas a saber casi todas y vas a poder leer prácticamente con la misma fuidéz que en español.</p>
<p>Los tips que te acabo de dar son para aprender inglés con un método que se llama inmersión. Basicamente te <em>sumerges</em> en el idioma para aprenderlo. Te rodeas de él lo más que puedas. Lees en inglés, escuchas música en inglés, miras películas o videos en inglés, etc. La idea es que te sumerjas en el idioma con contenido que te interese (política, economía, noticias, tecnología, cocina, deportes. Lo que sea que te guste). Cuando lees algo o ves un video en inglés no tanto por aprender el idioma, sino más por el contenido en sí, pasas un mejor tiempo aprendiendo sobre lo que te gusta y, como subproducto, aprendes otro idioma. También quiero dar a entender que el aprendizaje tiene más que ver con uno mismo que con cualquier otra cosa. Si estás tomando clases de inglés y te gusta asistir a ellas, continúa. Sin embargo, si quieres lograr buenos resultados pronto, ten en cuenta que las pocas horas que dedicas a ir a clase no van a ser suficientes. Probablemente sean suficientes para aprobar con el profesor, pero no para mucho más que eso. Si por el contrario no quieres o puedes asistir a clases de inglés, puedes completamente aprenderlo por tu cuenta ya que hoy en día hay muchos recursos para ello.</p>
<p> </p>
            ]]>
        </content>
    </entry>
</feed>
